{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as actions from '../auth/auth.actions';\nimport { Usuario } from '../auth/models/usuario.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/fire/firestore\";\nimport * as i3 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(auth, firestore, store) {\n      this.auth = auth;\n      this.firestore = firestore;\n      this.store = store;\n    }\n\n    fireListener() {\n      this.auth.authState.subscribe(fuser => {\n        if (fuser) {\n          this.firestore.doc(`${fuser.uid}/usuario`).valueChanges().subscribe(user => {\n            const usr = Usuario.fromFire(user);\n            this.store.dispatch(actions.setUser({\n              user\n            }));\n          });\n        } else {\n          this.store.dispatch(actions.unSetUser());\n        }\n      });\n    }\n\n    crearUsuario(nombre, email, password) {\n      return this.auth.createUserWithEmailAndPassword(email, password).then(({\n        user\n      }) => {\n        const newUser = new Usuario(user.uid, nombre, user.email);\n        return this.firestore.doc(`${user.uid}/usuario`).set(Object.assign({}, newUser));\n      }); //console.log({nombre,email,password})\n    }\n\n    ingresoUsuario(correo, password) {\n      return this.auth.signInWithEmailAndPassword(correo, password);\n    }\n\n    logOut() {\n      return this.auth.signOut();\n    }\n\n    isAuth() {\n      return this.auth.authState.pipe(map(fUser => fUser !== null));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}